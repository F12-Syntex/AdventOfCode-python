[
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "re",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "re",
        "description": "re",
        "detail": "re",
        "documentation": {}
    },
    {
        "label": "Counter",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "gcd",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "Day1",
        "kind": 6,
        "importPath": "advent_of_code.2015.day1.Day1",
        "description": "advent_of_code.2015.day1.Day1",
        "peekOfCode": "class Day1:\n    def __init__(self):\n        self.input_content = None\n    def solve_part1(self):\n        floor = 0\n        for char in self.input_content:\n            if char == \"(\":\n                floor += 1\n            elif char == \")\":\n                floor -= 1",
        "detail": "advent_of_code.2015.day1.Day1",
        "documentation": {}
    },
    {
        "label": "solver",
        "kind": 5,
        "importPath": "advent_of_code.2015.day1.Day1",
        "description": "advent_of_code.2015.day1.Day1",
        "peekOfCode": "solver = Day1()\nsolver.loadInputFiles()\npart1_result = solver.solve_part1()\npart2_result = solver.solve_part2()\nprint(\"Solution to Part 1:\", part1_result)\nprint(\"Solution to Part 2:\", part2_result)",
        "detail": "advent_of_code.2015.day1.Day1",
        "documentation": {}
    },
    {
        "label": "part1_result",
        "kind": 5,
        "importPath": "advent_of_code.2015.day1.Day1",
        "description": "advent_of_code.2015.day1.Day1",
        "peekOfCode": "part1_result = solver.solve_part1()\npart2_result = solver.solve_part2()\nprint(\"Solution to Part 1:\", part1_result)\nprint(\"Solution to Part 2:\", part2_result)",
        "detail": "advent_of_code.2015.day1.Day1",
        "documentation": {}
    },
    {
        "label": "part2_result",
        "kind": 5,
        "importPath": "advent_of_code.2015.day1.Day1",
        "description": "advent_of_code.2015.day1.Day1",
        "peekOfCode": "part2_result = solver.solve_part2()\nprint(\"Solution to Part 1:\", part1_result)\nprint(\"Solution to Part 2:\", part2_result)",
        "detail": "advent_of_code.2015.day1.Day1",
        "documentation": {}
    },
    {
        "label": "Day1",
        "kind": 6,
        "importPath": "advent_of_code.2015.day2.Day2",
        "description": "advent_of_code.2015.day2.Day2",
        "peekOfCode": "class Day1:\n    def __init__(self):\n        self.input_content = None\n    def solve_part1(self):\n        sum = 0\n        for line in self.input_content.splitlines():\n            dimentions = line.split(\"x\")\n            l = int(dimentions[0])\n            w = int(dimentions[1])\n            h = int(dimentions[2])",
        "detail": "advent_of_code.2015.day2.Day2",
        "documentation": {}
    },
    {
        "label": "solver",
        "kind": 5,
        "importPath": "advent_of_code.2015.day2.Day2",
        "description": "advent_of_code.2015.day2.Day2",
        "peekOfCode": "solver = Day1()\nsolver.loadInputFiles()\npart1_result = solver.solve_part1()\npart2_result = solver.solve_part2()\nprint(\"Solution to Part 1:\", part1_result)\nprint(\"Solution to Part 2:\", part2_result)",
        "detail": "advent_of_code.2015.day2.Day2",
        "documentation": {}
    },
    {
        "label": "part1_result",
        "kind": 5,
        "importPath": "advent_of_code.2015.day2.Day2",
        "description": "advent_of_code.2015.day2.Day2",
        "peekOfCode": "part1_result = solver.solve_part1()\npart2_result = solver.solve_part2()\nprint(\"Solution to Part 1:\", part1_result)\nprint(\"Solution to Part 2:\", part2_result)",
        "detail": "advent_of_code.2015.day2.Day2",
        "documentation": {}
    },
    {
        "label": "part2_result",
        "kind": 5,
        "importPath": "advent_of_code.2015.day2.Day2",
        "description": "advent_of_code.2015.day2.Day2",
        "peekOfCode": "part2_result = solver.solve_part2()\nprint(\"Solution to Part 1:\", part1_result)\nprint(\"Solution to Part 2:\", part2_result)",
        "detail": "advent_of_code.2015.day2.Day2",
        "documentation": {}
    },
    {
        "label": "Day",
        "kind": 6,
        "importPath": "advent_of_code.2023.boilerplate.Day",
        "description": "advent_of_code.2023.boilerplate.Day",
        "peekOfCode": "class Day:\n    def __init__(self):\n        self.input_content = None\n    def solve_part1(self):\n        for line in self.input_content.splitlines():\n            print(line)\n        return 0\n    def solve_part2(self):\n        return 0\n    def loadInputFiles(self):",
        "detail": "advent_of_code.2023.boilerplate.Day",
        "documentation": {}
    },
    {
        "label": "solver",
        "kind": 5,
        "importPath": "advent_of_code.2023.boilerplate.Day",
        "description": "advent_of_code.2023.boilerplate.Day",
        "peekOfCode": "solver = Day()\nsolver.loadInputFiles()\npart1_result = solver.solve_part1()\npart2_result = solver.solve_part2()\nprint(\"Solution to Part 1:\", part1_result)\nprint(\"Solution to Part 2:\", part2_result)",
        "detail": "advent_of_code.2023.boilerplate.Day",
        "documentation": {}
    },
    {
        "label": "part1_result",
        "kind": 5,
        "importPath": "advent_of_code.2023.boilerplate.Day",
        "description": "advent_of_code.2023.boilerplate.Day",
        "peekOfCode": "part1_result = solver.solve_part1()\npart2_result = solver.solve_part2()\nprint(\"Solution to Part 1:\", part1_result)\nprint(\"Solution to Part 2:\", part2_result)",
        "detail": "advent_of_code.2023.boilerplate.Day",
        "documentation": {}
    },
    {
        "label": "part2_result",
        "kind": 5,
        "importPath": "advent_of_code.2023.boilerplate.Day",
        "description": "advent_of_code.2023.boilerplate.Day",
        "peekOfCode": "part2_result = solver.solve_part2()\nprint(\"Solution to Part 1:\", part1_result)\nprint(\"Solution to Part 2:\", part2_result)",
        "detail": "advent_of_code.2023.boilerplate.Day",
        "documentation": {}
    },
    {
        "label": "Day1",
        "kind": 6,
        "importPath": "advent_of_code.2023.day1.Day1",
        "description": "advent_of_code.2023.day1.Day1",
        "peekOfCode": "class Day1:\n    def __init__(self):\n        self.input_content = None\n    def solve_part1(self):\n        sum = 0 \n        for line in self.input_content.splitlines():\n            leftNumber = \"-1\" \n            rightNumber = \"-1\" \n            l = len(line) - 1\n            for r in range(len(line)):",
        "detail": "advent_of_code.2023.day1.Day1",
        "documentation": {}
    },
    {
        "label": "solver",
        "kind": 5,
        "importPath": "advent_of_code.2023.day1.Day1",
        "description": "advent_of_code.2023.day1.Day1",
        "peekOfCode": "solver = Day1()\nsolver.loadInputFiles()\npart1_result = solver.solve_part1()\npart2_result = solver.solve_part2()\nprint(\"Solution to Part 1:\", part1_result)\nprint(\"Solution to Part 2:\", part2_result)",
        "detail": "advent_of_code.2023.day1.Day1",
        "documentation": {}
    },
    {
        "label": "part1_result",
        "kind": 5,
        "importPath": "advent_of_code.2023.day1.Day1",
        "description": "advent_of_code.2023.day1.Day1",
        "peekOfCode": "part1_result = solver.solve_part1()\npart2_result = solver.solve_part2()\nprint(\"Solution to Part 1:\", part1_result)\nprint(\"Solution to Part 2:\", part2_result)",
        "detail": "advent_of_code.2023.day1.Day1",
        "documentation": {}
    },
    {
        "label": "part2_result",
        "kind": 5,
        "importPath": "advent_of_code.2023.day1.Day1",
        "description": "advent_of_code.2023.day1.Day1",
        "peekOfCode": "part2_result = solver.solve_part2()\nprint(\"Solution to Part 1:\", part1_result)\nprint(\"Solution to Part 2:\", part2_result)",
        "detail": "advent_of_code.2023.day1.Day1",
        "documentation": {}
    },
    {
        "label": "Day2",
        "kind": 6,
        "importPath": "advent_of_code.2023.day2.Day2",
        "description": "advent_of_code.2023.day2.Day2",
        "peekOfCode": "class Day2:\n    def __init__(self):\n        self.input_content = None\n    def solve_part1(self):\n        sum = 0\n        colours = [\"red\", \"green\", \"blue\"]\n        for line in self.input_content.splitlines():\n            count = [0, 0, 0]\n            id = int(line.split(\":\")[0].split(\" \")[1])\n            line = line.split(\":\")[1]",
        "detail": "advent_of_code.2023.day2.Day2",
        "documentation": {}
    },
    {
        "label": "solver",
        "kind": 5,
        "importPath": "advent_of_code.2023.day2.Day2",
        "description": "advent_of_code.2023.day2.Day2",
        "peekOfCode": "solver = Day2()\nsolver.loadInputFiles()\npart1_result = solver.solve_part1()\npart2_result = solver.solve_part2()\nprint(\"Solution to Part 1:\", part1_result)\nprint(\"Solution to Part 2:\", part2_result)",
        "detail": "advent_of_code.2023.day2.Day2",
        "documentation": {}
    },
    {
        "label": "part1_result",
        "kind": 5,
        "importPath": "advent_of_code.2023.day2.Day2",
        "description": "advent_of_code.2023.day2.Day2",
        "peekOfCode": "part1_result = solver.solve_part1()\npart2_result = solver.solve_part2()\nprint(\"Solution to Part 1:\", part1_result)\nprint(\"Solution to Part 2:\", part2_result)",
        "detail": "advent_of_code.2023.day2.Day2",
        "documentation": {}
    },
    {
        "label": "part2_result",
        "kind": 5,
        "importPath": "advent_of_code.2023.day2.Day2",
        "description": "advent_of_code.2023.day2.Day2",
        "peekOfCode": "part2_result = solver.solve_part2()\nprint(\"Solution to Part 1:\", part1_result)\nprint(\"Solution to Part 2:\", part2_result)",
        "detail": "advent_of_code.2023.day2.Day2",
        "documentation": {}
    },
    {
        "label": "Day3",
        "kind": 6,
        "importPath": "advent_of_code.2023.day3.Day3",
        "description": "advent_of_code.2023.day3.Day3",
        "peekOfCode": "class Day3:\n    def __init__(self):\n        self.input_content = None\n    def solve_part1(self):\n        grid = []\n        for line in self.input_content.splitlines():\n            grid.append(list(line))\n        x = 0\n        y = 0\n        foundNumber = False",
        "detail": "advent_of_code.2023.day3.Day3",
        "documentation": {}
    },
    {
        "label": "solver",
        "kind": 5,
        "importPath": "advent_of_code.2023.day3.Day3",
        "description": "advent_of_code.2023.day3.Day3",
        "peekOfCode": "solver = Day3()\nsolver.loadInputFiles()\npart1_result = solver.solve_part1()\npart2_result = solver.solve_part2()\nprint(\"Solution to Part 1:\", part1_result)\nprint(\"Solution to Part 2:\", part2_result)",
        "detail": "advent_of_code.2023.day3.Day3",
        "documentation": {}
    },
    {
        "label": "part1_result",
        "kind": 5,
        "importPath": "advent_of_code.2023.day3.Day3",
        "description": "advent_of_code.2023.day3.Day3",
        "peekOfCode": "part1_result = solver.solve_part1()\npart2_result = solver.solve_part2()\nprint(\"Solution to Part 1:\", part1_result)\nprint(\"Solution to Part 2:\", part2_result)",
        "detail": "advent_of_code.2023.day3.Day3",
        "documentation": {}
    },
    {
        "label": "part2_result",
        "kind": 5,
        "importPath": "advent_of_code.2023.day3.Day3",
        "description": "advent_of_code.2023.day3.Day3",
        "peekOfCode": "part2_result = solver.solve_part2()\nprint(\"Solution to Part 1:\", part1_result)\nprint(\"Solution to Part 2:\", part2_result)",
        "detail": "advent_of_code.2023.day3.Day3",
        "documentation": {}
    },
    {
        "label": "Day4",
        "kind": 6,
        "importPath": "advent_of_code.2023.day4.Day4",
        "description": "advent_of_code.2023.day4.Day4",
        "peekOfCode": "class Day4:\n    def __init__(self):\n        self.input_content = None\n    def solve_part1(self):\n        score = 0\n        for line in self.input_content.splitlines():\n            winning, cards = self.parseLine(line)\n            winnings = len(set(winning).intersection(set(cards)))\n            if winnings == 0:\n                continue",
        "detail": "advent_of_code.2023.day4.Day4",
        "documentation": {}
    },
    {
        "label": "solver",
        "kind": 5,
        "importPath": "advent_of_code.2023.day4.Day4",
        "description": "advent_of_code.2023.day4.Day4",
        "peekOfCode": "solver = Day4()\nsolver.loadInputFiles()\npart1_result = solver.solve_part1()\npart2_result = solver.solve_part2()\nprint(\"Solution to Part 1:\", part1_result)\nprint(\"Solution to Part 2:\", part2_result)",
        "detail": "advent_of_code.2023.day4.Day4",
        "documentation": {}
    },
    {
        "label": "part1_result",
        "kind": 5,
        "importPath": "advent_of_code.2023.day4.Day4",
        "description": "advent_of_code.2023.day4.Day4",
        "peekOfCode": "part1_result = solver.solve_part1()\npart2_result = solver.solve_part2()\nprint(\"Solution to Part 1:\", part1_result)\nprint(\"Solution to Part 2:\", part2_result)",
        "detail": "advent_of_code.2023.day4.Day4",
        "documentation": {}
    },
    {
        "label": "part2_result",
        "kind": 5,
        "importPath": "advent_of_code.2023.day4.Day4",
        "description": "advent_of_code.2023.day4.Day4",
        "peekOfCode": "part2_result = solver.solve_part2()\nprint(\"Solution to Part 1:\", part1_result)\nprint(\"Solution to Part 2:\", part2_result)",
        "detail": "advent_of_code.2023.day4.Day4",
        "documentation": {}
    },
    {
        "label": "Day5",
        "kind": 6,
        "importPath": "advent_of_code.2023.day5.Day5",
        "description": "advent_of_code.2023.day5.Day5",
        "peekOfCode": "class Day5:\n    def __init__(self):\n        self.input_content = None\n    def solve_part1(self):\n        seeds = self.parseContent()[0]\n        minLocation = float(\"inf\")\n        for seed in seeds:\n            minLocation = min(minLocation, self.computeSeed(seed))\n        return minLocation\n    def computeSeed(self, seed):",
        "detail": "advent_of_code.2023.day5.Day5",
        "documentation": {}
    },
    {
        "label": "solver",
        "kind": 5,
        "importPath": "advent_of_code.2023.day5.Day5",
        "description": "advent_of_code.2023.day5.Day5",
        "peekOfCode": "solver = Day5()\nsolver.loadInputFiles()\npart1_result = solver.solve_part1()\npart2_result = solver.solve_part2()\nprint(\"Solution to Part 1:\", part1_result)\nprint(\"Solution to Part 2:\", part2_result)",
        "detail": "advent_of_code.2023.day5.Day5",
        "documentation": {}
    },
    {
        "label": "part1_result",
        "kind": 5,
        "importPath": "advent_of_code.2023.day5.Day5",
        "description": "advent_of_code.2023.day5.Day5",
        "peekOfCode": "part1_result = solver.solve_part1()\npart2_result = solver.solve_part2()\nprint(\"Solution to Part 1:\", part1_result)\nprint(\"Solution to Part 2:\", part2_result)",
        "detail": "advent_of_code.2023.day5.Day5",
        "documentation": {}
    },
    {
        "label": "part2_result",
        "kind": 5,
        "importPath": "advent_of_code.2023.day5.Day5",
        "description": "advent_of_code.2023.day5.Day5",
        "peekOfCode": "part2_result = solver.solve_part2()\nprint(\"Solution to Part 1:\", part1_result)\nprint(\"Solution to Part 2:\", part2_result)",
        "detail": "advent_of_code.2023.day5.Day5",
        "documentation": {}
    },
    {
        "label": "Day6",
        "kind": 6,
        "importPath": "advent_of_code.2023.day6.Day6",
        "description": "advent_of_code.2023.day6.Day6",
        "peekOfCode": "class Day6:\n    def __init__(self):\n        self.input_content = None\n    def solve_part1(self):\n        races = self.parseInput()\n        total = 0\n        for race in races:\n            wins = 0\n            for speed in range(race[0] + 1):\n                seconds = (race[0] - speed)",
        "detail": "advent_of_code.2023.day6.Day6",
        "documentation": {}
    },
    {
        "label": "solver",
        "kind": 5,
        "importPath": "advent_of_code.2023.day6.Day6",
        "description": "advent_of_code.2023.day6.Day6",
        "peekOfCode": "solver = Day6()\nsolver.loadInputFiles()\npart1_result = solver.solve_part1()\npart2_result = solver.solve_part2()\nprint(\"Solution to Part 1:\", part1_result)\nprint(\"Solution to Part 2:\", part2_result)",
        "detail": "advent_of_code.2023.day6.Day6",
        "documentation": {}
    },
    {
        "label": "part1_result",
        "kind": 5,
        "importPath": "advent_of_code.2023.day6.Day6",
        "description": "advent_of_code.2023.day6.Day6",
        "peekOfCode": "part1_result = solver.solve_part1()\npart2_result = solver.solve_part2()\nprint(\"Solution to Part 1:\", part1_result)\nprint(\"Solution to Part 2:\", part2_result)",
        "detail": "advent_of_code.2023.day6.Day6",
        "documentation": {}
    },
    {
        "label": "part2_result",
        "kind": 5,
        "importPath": "advent_of_code.2023.day6.Day6",
        "description": "advent_of_code.2023.day6.Day6",
        "peekOfCode": "part2_result = solver.solve_part2()\nprint(\"Solution to Part 1:\", part1_result)\nprint(\"Solution to Part 2:\", part2_result)",
        "detail": "advent_of_code.2023.day6.Day6",
        "documentation": {}
    },
    {
        "label": "Day7",
        "kind": 6,
        "importPath": "advent_of_code.2023.day7.Day7",
        "description": "advent_of_code.2023.day7.Day7",
        "peekOfCode": "class Day7:\n    def __init__(self):\n        self.input_content = None\n    def solve(self, sortFunc):\n        cards = []\n        for line in self.input_content.splitlines():\n            data = line.split(\" \")\n            cards.append((data[0], data[1]))\n        cards = sorted(cards, key=lambda c:sortFunc(c[0]))\n        sum = 0",
        "detail": "advent_of_code.2023.day7.Day7",
        "documentation": {}
    },
    {
        "label": "solver",
        "kind": 5,
        "importPath": "advent_of_code.2023.day7.Day7",
        "description": "advent_of_code.2023.day7.Day7",
        "peekOfCode": "solver = Day7()\nsolver.loadInputFiles()\npart1_result = solver.solve_part1()\npart2_result = solver.solve_part2()\nprint(\"Solution to Part 1:\", part1_result)\nprint(\"Solution to Part 2:\", part2_result)",
        "detail": "advent_of_code.2023.day7.Day7",
        "documentation": {}
    },
    {
        "label": "part1_result",
        "kind": 5,
        "importPath": "advent_of_code.2023.day7.Day7",
        "description": "advent_of_code.2023.day7.Day7",
        "peekOfCode": "part1_result = solver.solve_part1()\npart2_result = solver.solve_part2()\nprint(\"Solution to Part 1:\", part1_result)\nprint(\"Solution to Part 2:\", part2_result)",
        "detail": "advent_of_code.2023.day7.Day7",
        "documentation": {}
    },
    {
        "label": "part2_result",
        "kind": 5,
        "importPath": "advent_of_code.2023.day7.Day7",
        "description": "advent_of_code.2023.day7.Day7",
        "peekOfCode": "part2_result = solver.solve_part2()\nprint(\"Solution to Part 1:\", part1_result)\nprint(\"Solution to Part 2:\", part2_result)",
        "detail": "advent_of_code.2023.day7.Day7",
        "documentation": {}
    },
    {
        "label": "Day8",
        "kind": 6,
        "importPath": "advent_of_code.2023.day8.Day8",
        "description": "advent_of_code.2023.day8.Day8",
        "peekOfCode": "class Day8:\n    def __init__(self):\n        self.input_content = None\n    def solve_part1(self):\n        movements = self.input_content.split(\"\\n\")[0].strip()\n        movements = list(movements)\n        paths = self.input_content.split(\"\\n\")[2:]\n        mapping = {}\n        start = 'AAA'\n        end = 'ZZZ'",
        "detail": "advent_of_code.2023.day8.Day8",
        "documentation": {}
    },
    {
        "label": "solver",
        "kind": 5,
        "importPath": "advent_of_code.2023.day8.Day8",
        "description": "advent_of_code.2023.day8.Day8",
        "peekOfCode": "solver = Day8()\nsolver.loadInputFiles()\npart1_result = solver.solve_part1()\npart2_result = solver.solve_part2()\nprint(\"Solution to Part 1:\", part1_result)\nprint(\"Solution to Part 2:\", part2_result)",
        "detail": "advent_of_code.2023.day8.Day8",
        "documentation": {}
    },
    {
        "label": "part1_result",
        "kind": 5,
        "importPath": "advent_of_code.2023.day8.Day8",
        "description": "advent_of_code.2023.day8.Day8",
        "peekOfCode": "part1_result = solver.solve_part1()\npart2_result = solver.solve_part2()\nprint(\"Solution to Part 1:\", part1_result)\nprint(\"Solution to Part 2:\", part2_result)",
        "detail": "advent_of_code.2023.day8.Day8",
        "documentation": {}
    },
    {
        "label": "part2_result",
        "kind": 5,
        "importPath": "advent_of_code.2023.day8.Day8",
        "description": "advent_of_code.2023.day8.Day8",
        "peekOfCode": "part2_result = solver.solve_part2()\nprint(\"Solution to Part 1:\", part1_result)\nprint(\"Solution to Part 2:\", part2_result)",
        "detail": "advent_of_code.2023.day8.Day8",
        "documentation": {}
    },
    {
        "label": "Day9",
        "kind": 6,
        "importPath": "advent_of_code.2023.day9.Day9",
        "description": "advent_of_code.2023.day9.Day9",
        "peekOfCode": "class Day9:\n    def __init__(self):\n        self.input_content = None\n    def solve(self, part1): \n        sum = 0\n        for line in self.input_content.splitlines():\n            values = [line := [int(x) for x in line.split(\" \")]]\n            while any(line := [j - i for i, j in zip(line, line[1:])]):\n                values.append(line)\n            increment = 0",
        "detail": "advent_of_code.2023.day9.Day9",
        "documentation": {}
    },
    {
        "label": "solver",
        "kind": 5,
        "importPath": "advent_of_code.2023.day9.Day9",
        "description": "advent_of_code.2023.day9.Day9",
        "peekOfCode": "solver = Day9()\nsolver.loadInputFiles()\npart1_result = solver.solve(True)\npart2_result = solver.solve(False)\nprint(\"Solution to Part 1:\", part1_result)\nprint(\"Solution to Part 2:\", part2_result)",
        "detail": "advent_of_code.2023.day9.Day9",
        "documentation": {}
    },
    {
        "label": "part1_result",
        "kind": 5,
        "importPath": "advent_of_code.2023.day9.Day9",
        "description": "advent_of_code.2023.day9.Day9",
        "peekOfCode": "part1_result = solver.solve(True)\npart2_result = solver.solve(False)\nprint(\"Solution to Part 1:\", part1_result)\nprint(\"Solution to Part 2:\", part2_result)",
        "detail": "advent_of_code.2023.day9.Day9",
        "documentation": {}
    },
    {
        "label": "part2_result",
        "kind": 5,
        "importPath": "advent_of_code.2023.day9.Day9",
        "description": "advent_of_code.2023.day9.Day9",
        "peekOfCode": "part2_result = solver.solve(False)\nprint(\"Solution to Part 1:\", part1_result)\nprint(\"Solution to Part 2:\", part2_result)",
        "detail": "advent_of_code.2023.day9.Day9",
        "documentation": {}
    }
]