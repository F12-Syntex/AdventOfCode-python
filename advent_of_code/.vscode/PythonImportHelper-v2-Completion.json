[
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "requests",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "requests",
        "description": "requests",
        "detail": "requests",
        "documentation": {}
    },
    {
        "label": "time",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "time",
        "description": "time",
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "AOCInputGrabber",
        "importPath": "AOCInputGrabber",
        "description": "AOCInputGrabber",
        "isExtraImport": true,
        "detail": "AOCInputGrabber",
        "documentation": {}
    },
    {
        "label": "AOCInputGrabber",
        "importPath": "AOCInputGrabber",
        "description": "AOCInputGrabber",
        "isExtraImport": true,
        "detail": "AOCInputGrabber",
        "documentation": {}
    },
    {
        "label": "AOCInputGrabber",
        "importPath": "AOCInputGrabber",
        "description": "AOCInputGrabber",
        "isExtraImport": true,
        "detail": "AOCInputGrabber",
        "documentation": {}
    },
    {
        "label": "AOCInputGrabber",
        "importPath": "AOCInputGrabber",
        "description": "AOCInputGrabber",
        "isExtraImport": true,
        "detail": "AOCInputGrabber",
        "documentation": {}
    },
    {
        "label": "AOCInputGrabber",
        "importPath": "AOCInputGrabber",
        "description": "AOCInputGrabber",
        "isExtraImport": true,
        "detail": "AOCInputGrabber",
        "documentation": {}
    },
    {
        "label": "AOCInputGrabber",
        "importPath": "AOCInputGrabber",
        "description": "AOCInputGrabber",
        "isExtraImport": true,
        "detail": "AOCInputGrabber",
        "documentation": {}
    },
    {
        "label": "re",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "re",
        "description": "re",
        "detail": "re",
        "documentation": {}
    },
    {
        "label": "collections",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "collections",
        "description": "collections",
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "Counter",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "deque",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "deque",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "gcd",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "heappush",
        "importPath": "heapq",
        "description": "heapq",
        "isExtraImport": true,
        "detail": "heapq",
        "documentation": {}
    },
    {
        "label": "heappop",
        "importPath": "heapq",
        "description": "heapq",
        "isExtraImport": true,
        "detail": "heapq",
        "documentation": {}
    },
    {
        "label": "Module",
        "importPath": "Module",
        "description": "Module",
        "isExtraImport": true,
        "detail": "Module",
        "documentation": {}
    },
    {
        "label": "string",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "string",
        "description": "string",
        "detail": "string",
        "documentation": {}
    },
    {
        "label": "Deque",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Day1",
        "kind": 6,
        "importPath": "2015.day1.day1",
        "description": "2015.day1.day1",
        "peekOfCode": "class Day1:\n    def __init__(self):\n        self.input_content = None\n    def solve_part1(self):\n        floor = 0\n        for char in self.input_content:\n            if char == \"(\":\n                floor += 1\n            elif char == \")\":\n                floor -= 1",
        "detail": "2015.day1.day1",
        "documentation": {}
    },
    {
        "label": "solver",
        "kind": 5,
        "importPath": "2015.day1.day1",
        "description": "2015.day1.day1",
        "peekOfCode": "solver = Day1()\nsolver.loadInputFiles()\npart1_result = solver.solve_part1()\npart2_result = solver.solve_part2()\nprint(\"Solution to Part 1:\", part1_result)\nprint(\"Solution to Part 2:\", part2_result)",
        "detail": "2015.day1.day1",
        "documentation": {}
    },
    {
        "label": "part1_result",
        "kind": 5,
        "importPath": "2015.day1.day1",
        "description": "2015.day1.day1",
        "peekOfCode": "part1_result = solver.solve_part1()\npart2_result = solver.solve_part2()\nprint(\"Solution to Part 1:\", part1_result)\nprint(\"Solution to Part 2:\", part2_result)",
        "detail": "2015.day1.day1",
        "documentation": {}
    },
    {
        "label": "part2_result",
        "kind": 5,
        "importPath": "2015.day1.day1",
        "description": "2015.day1.day1",
        "peekOfCode": "part2_result = solver.solve_part2()\nprint(\"Solution to Part 1:\", part1_result)\nprint(\"Solution to Part 2:\", part2_result)",
        "detail": "2015.day1.day1",
        "documentation": {}
    },
    {
        "label": "Day1",
        "kind": 6,
        "importPath": "2015.day2.Day2",
        "description": "2015.day2.Day2",
        "peekOfCode": "class Day1:\n    def __init__(self):\n        self.input_content = None\n    def solve_part1(self):\n        sum = 0\n        for line in self.input_content.splitlines():\n            dimentions = line.split(\"x\")\n            l = int(dimentions[0])\n            w = int(dimentions[1])\n            h = int(dimentions[2])",
        "detail": "2015.day2.Day2",
        "documentation": {}
    },
    {
        "label": "solver",
        "kind": 5,
        "importPath": "2015.day2.Day2",
        "description": "2015.day2.Day2",
        "peekOfCode": "solver = Day1()\nsolver.loadInputFiles()\npart1_result = solver.solve_part1()\npart2_result = solver.solve_part2()\nprint(\"Solution to Part 1:\", part1_result)\nprint(\"Solution to Part 2:\", part2_result)",
        "detail": "2015.day2.Day2",
        "documentation": {}
    },
    {
        "label": "part1_result",
        "kind": 5,
        "importPath": "2015.day2.Day2",
        "description": "2015.day2.Day2",
        "peekOfCode": "part1_result = solver.solve_part1()\npart2_result = solver.solve_part2()\nprint(\"Solution to Part 1:\", part1_result)\nprint(\"Solution to Part 2:\", part2_result)",
        "detail": "2015.day2.Day2",
        "documentation": {}
    },
    {
        "label": "part2_result",
        "kind": 5,
        "importPath": "2015.day2.Day2",
        "description": "2015.day2.Day2",
        "peekOfCode": "part2_result = solver.solve_part2()\nprint(\"Solution to Part 1:\", part1_result)\nprint(\"Solution to Part 2:\", part2_result)",
        "detail": "2015.day2.Day2",
        "documentation": {}
    },
    {
        "label": "AOCInputGrabber",
        "kind": 6,
        "importPath": "2023.boilerplate.AOCInputGrabber",
        "description": "2023.boilerplate.AOCInputGrabber",
        "peekOfCode": "class AOCInputGrabber:\n    def __init__(self, year, day):\n        self.year = year\n        self.day = day\n    def grab_input(self):\n        session_key = os.environ.get('AOC_SESSION_KEY')\n        url = f'https://adventofcode.com/{self.year}/day/{self.day}/input'\n        headers = {'cookie': f'session={session_key}'}\n        response = requests.get(url, headers=headers)\n        if response.status_code == 200:",
        "detail": "2023.boilerplate.AOCInputGrabber",
        "documentation": {}
    },
    {
        "label": "Day",
        "kind": 6,
        "importPath": "2023.boilerplate.Day",
        "description": "2023.boilerplate.Day",
        "peekOfCode": "class Day:\n    def __init__(self):\n        self.input_content = None\n        self.DAY = 0\n        self.YEAR = 2023\n        self.aoc_utils = AOCInputGrabber(self.YEAR, self.DAY)\n    def solve_part1(self):\n        self.loadGrid()\n        self.prettyPrintGrid()\n        return 0",
        "detail": "2023.boilerplate.Day",
        "documentation": {}
    },
    {
        "label": "solver",
        "kind": 5,
        "importPath": "2023.boilerplate.Day",
        "description": "2023.boilerplate.Day",
        "peekOfCode": "solver = Day()\nsolver.loadInputFiles()\nstart_time_part1 = time.time()\npart1_result = solver.solve_part1()\nend_time_part1 = time.time()\nprint(\"Solution to Part 1:\", part1_result, \"completed in\", round((end_time_part1 - start_time_part1) * 1000), \"ms\")\nstart_time_part2 = time.time()\npart2_result = solver.solve_part2()\nend_time_part2 = time.time()\nprint(\"Solution to Part 2:\", part2_result, \"completed in\", round((end_time_part2 - start_time_part2) * 1000), \"ms\")",
        "detail": "2023.boilerplate.Day",
        "documentation": {}
    },
    {
        "label": "start_time_part1",
        "kind": 5,
        "importPath": "2023.boilerplate.Day",
        "description": "2023.boilerplate.Day",
        "peekOfCode": "start_time_part1 = time.time()\npart1_result = solver.solve_part1()\nend_time_part1 = time.time()\nprint(\"Solution to Part 1:\", part1_result, \"completed in\", round((end_time_part1 - start_time_part1) * 1000), \"ms\")\nstart_time_part2 = time.time()\npart2_result = solver.solve_part2()\nend_time_part2 = time.time()\nprint(\"Solution to Part 2:\", part2_result, \"completed in\", round((end_time_part2 - start_time_part2) * 1000), \"ms\")",
        "detail": "2023.boilerplate.Day",
        "documentation": {}
    },
    {
        "label": "part1_result",
        "kind": 5,
        "importPath": "2023.boilerplate.Day",
        "description": "2023.boilerplate.Day",
        "peekOfCode": "part1_result = solver.solve_part1()\nend_time_part1 = time.time()\nprint(\"Solution to Part 1:\", part1_result, \"completed in\", round((end_time_part1 - start_time_part1) * 1000), \"ms\")\nstart_time_part2 = time.time()\npart2_result = solver.solve_part2()\nend_time_part2 = time.time()\nprint(\"Solution to Part 2:\", part2_result, \"completed in\", round((end_time_part2 - start_time_part2) * 1000), \"ms\")",
        "detail": "2023.boilerplate.Day",
        "documentation": {}
    },
    {
        "label": "end_time_part1",
        "kind": 5,
        "importPath": "2023.boilerplate.Day",
        "description": "2023.boilerplate.Day",
        "peekOfCode": "end_time_part1 = time.time()\nprint(\"Solution to Part 1:\", part1_result, \"completed in\", round((end_time_part1 - start_time_part1) * 1000), \"ms\")\nstart_time_part2 = time.time()\npart2_result = solver.solve_part2()\nend_time_part2 = time.time()\nprint(\"Solution to Part 2:\", part2_result, \"completed in\", round((end_time_part2 - start_time_part2) * 1000), \"ms\")",
        "detail": "2023.boilerplate.Day",
        "documentation": {}
    },
    {
        "label": "start_time_part2",
        "kind": 5,
        "importPath": "2023.boilerplate.Day",
        "description": "2023.boilerplate.Day",
        "peekOfCode": "start_time_part2 = time.time()\npart2_result = solver.solve_part2()\nend_time_part2 = time.time()\nprint(\"Solution to Part 2:\", part2_result, \"completed in\", round((end_time_part2 - start_time_part2) * 1000), \"ms\")",
        "detail": "2023.boilerplate.Day",
        "documentation": {}
    },
    {
        "label": "part2_result",
        "kind": 5,
        "importPath": "2023.boilerplate.Day",
        "description": "2023.boilerplate.Day",
        "peekOfCode": "part2_result = solver.solve_part2()\nend_time_part2 = time.time()\nprint(\"Solution to Part 2:\", part2_result, \"completed in\", round((end_time_part2 - start_time_part2) * 1000), \"ms\")",
        "detail": "2023.boilerplate.Day",
        "documentation": {}
    },
    {
        "label": "end_time_part2",
        "kind": 5,
        "importPath": "2023.boilerplate.Day",
        "description": "2023.boilerplate.Day",
        "peekOfCode": "end_time_part2 = time.time()\nprint(\"Solution to Part 2:\", part2_result, \"completed in\", round((end_time_part2 - start_time_part2) * 1000), \"ms\")",
        "detail": "2023.boilerplate.Day",
        "documentation": {}
    },
    {
        "label": "Day1",
        "kind": 6,
        "importPath": "2023.day01.Day1",
        "description": "2023.day01.Day1",
        "peekOfCode": "class Day1:\n    def __init__(self):\n        self.input_content = None\n    def solve_part1(self):\n        sum = 0 \n        for line in self.input_content.splitlines():\n            leftNumber = \"-1\" \n            rightNumber = \"-1\" \n            l = len(line) - 1\n            for r in range(len(line)):",
        "detail": "2023.day01.Day1",
        "documentation": {}
    },
    {
        "label": "solver",
        "kind": 5,
        "importPath": "2023.day01.Day1",
        "description": "2023.day01.Day1",
        "peekOfCode": "solver = Day1()\nsolver.loadInputFiles()\npart1_result = solver.solve_part1()\npart2_result = solver.solve_part2()\nprint(\"Solution to Part 1:\", part1_result)\nprint(\"Solution to Part 2:\", part2_result)",
        "detail": "2023.day01.Day1",
        "documentation": {}
    },
    {
        "label": "part1_result",
        "kind": 5,
        "importPath": "2023.day01.Day1",
        "description": "2023.day01.Day1",
        "peekOfCode": "part1_result = solver.solve_part1()\npart2_result = solver.solve_part2()\nprint(\"Solution to Part 1:\", part1_result)\nprint(\"Solution to Part 2:\", part2_result)",
        "detail": "2023.day01.Day1",
        "documentation": {}
    },
    {
        "label": "part2_result",
        "kind": 5,
        "importPath": "2023.day01.Day1",
        "description": "2023.day01.Day1",
        "peekOfCode": "part2_result = solver.solve_part2()\nprint(\"Solution to Part 1:\", part1_result)\nprint(\"Solution to Part 2:\", part2_result)",
        "detail": "2023.day01.Day1",
        "documentation": {}
    },
    {
        "label": "Day2",
        "kind": 6,
        "importPath": "2023.day02.Day2",
        "description": "2023.day02.Day2",
        "peekOfCode": "class Day2:\n    def __init__(self):\n        self.input_content = None\n    def solve_part1(self):\n        sum = 0\n        colours = [\"red\", \"green\", \"blue\"]\n        for line in self.input_content.splitlines():\n            count = [0, 0, 0]\n            id = int(line.split(\":\")[0].split(\" \")[1])\n            line = line.split(\":\")[1]",
        "detail": "2023.day02.Day2",
        "documentation": {}
    },
    {
        "label": "solver",
        "kind": 5,
        "importPath": "2023.day02.Day2",
        "description": "2023.day02.Day2",
        "peekOfCode": "solver = Day2()\nsolver.loadInputFiles()\npart1_result = solver.solve_part1()\npart2_result = solver.solve_part2()\nprint(\"Solution to Part 1:\", part1_result)\nprint(\"Solution to Part 2:\", part2_result)",
        "detail": "2023.day02.Day2",
        "documentation": {}
    },
    {
        "label": "part1_result",
        "kind": 5,
        "importPath": "2023.day02.Day2",
        "description": "2023.day02.Day2",
        "peekOfCode": "part1_result = solver.solve_part1()\npart2_result = solver.solve_part2()\nprint(\"Solution to Part 1:\", part1_result)\nprint(\"Solution to Part 2:\", part2_result)",
        "detail": "2023.day02.Day2",
        "documentation": {}
    },
    {
        "label": "part2_result",
        "kind": 5,
        "importPath": "2023.day02.Day2",
        "description": "2023.day02.Day2",
        "peekOfCode": "part2_result = solver.solve_part2()\nprint(\"Solution to Part 1:\", part1_result)\nprint(\"Solution to Part 2:\", part2_result)",
        "detail": "2023.day02.Day2",
        "documentation": {}
    },
    {
        "label": "Day3",
        "kind": 6,
        "importPath": "2023.day03.Day3",
        "description": "2023.day03.Day3",
        "peekOfCode": "class Day3:\n    def __init__(self):\n        self.input_content = None\n    def solve_part1(self):\n        grid = []\n        for line in self.input_content.splitlines():\n            grid.append(list(line))\n        x = 0\n        y = 0\n        foundNumber = False",
        "detail": "2023.day03.Day3",
        "documentation": {}
    },
    {
        "label": "solver",
        "kind": 5,
        "importPath": "2023.day03.Day3",
        "description": "2023.day03.Day3",
        "peekOfCode": "solver = Day3()\nsolver.loadInputFiles()\npart1_result = solver.solve_part1()\npart2_result = solver.solve_part2()\nprint(\"Solution to Part 1:\", part1_result)\nprint(\"Solution to Part 2:\", part2_result)",
        "detail": "2023.day03.Day3",
        "documentation": {}
    },
    {
        "label": "part1_result",
        "kind": 5,
        "importPath": "2023.day03.Day3",
        "description": "2023.day03.Day3",
        "peekOfCode": "part1_result = solver.solve_part1()\npart2_result = solver.solve_part2()\nprint(\"Solution to Part 1:\", part1_result)\nprint(\"Solution to Part 2:\", part2_result)",
        "detail": "2023.day03.Day3",
        "documentation": {}
    },
    {
        "label": "part2_result",
        "kind": 5,
        "importPath": "2023.day03.Day3",
        "description": "2023.day03.Day3",
        "peekOfCode": "part2_result = solver.solve_part2()\nprint(\"Solution to Part 1:\", part1_result)\nprint(\"Solution to Part 2:\", part2_result)",
        "detail": "2023.day03.Day3",
        "documentation": {}
    },
    {
        "label": "Day4",
        "kind": 6,
        "importPath": "2023.day04.Day4",
        "description": "2023.day04.Day4",
        "peekOfCode": "class Day4:\n    def __init__(self):\n        self.input_content = None\n    def solve_part1(self):\n        score = 0\n        for line in self.input_content.splitlines():\n            winning, cards = self.parseLine(line)\n            winnings = len(set(winning).intersection(set(cards)))\n            if winnings == 0:\n                continue",
        "detail": "2023.day04.Day4",
        "documentation": {}
    },
    {
        "label": "solver",
        "kind": 5,
        "importPath": "2023.day04.Day4",
        "description": "2023.day04.Day4",
        "peekOfCode": "solver = Day4()\nsolver.loadInputFiles()\npart1_result = solver.solve_part1()\npart2_result = solver.solve_part2()\nprint(\"Solution to Part 1:\", part1_result)\nprint(\"Solution to Part 2:\", part2_result)",
        "detail": "2023.day04.Day4",
        "documentation": {}
    },
    {
        "label": "part1_result",
        "kind": 5,
        "importPath": "2023.day04.Day4",
        "description": "2023.day04.Day4",
        "peekOfCode": "part1_result = solver.solve_part1()\npart2_result = solver.solve_part2()\nprint(\"Solution to Part 1:\", part1_result)\nprint(\"Solution to Part 2:\", part2_result)",
        "detail": "2023.day04.Day4",
        "documentation": {}
    },
    {
        "label": "part2_result",
        "kind": 5,
        "importPath": "2023.day04.Day4",
        "description": "2023.day04.Day4",
        "peekOfCode": "part2_result = solver.solve_part2()\nprint(\"Solution to Part 1:\", part1_result)\nprint(\"Solution to Part 2:\", part2_result)",
        "detail": "2023.day04.Day4",
        "documentation": {}
    },
    {
        "label": "Day5",
        "kind": 6,
        "importPath": "2023.day05.Day5",
        "description": "2023.day05.Day5",
        "peekOfCode": "class Day5:\n    def __init__(self):\n        self.input_content = None\n    def solve_part1(self):\n        seeds = self.parseContent()[0]\n        minLocation = float(\"inf\")\n        for seed in seeds:\n            minLocation = min(minLocation, self.computeSeed(seed))\n        return minLocation\n    def computeSeed(self, seed):",
        "detail": "2023.day05.Day5",
        "documentation": {}
    },
    {
        "label": "solver",
        "kind": 5,
        "importPath": "2023.day05.Day5",
        "description": "2023.day05.Day5",
        "peekOfCode": "solver = Day5()\nsolver.loadInputFiles()\npart1_result = solver.solve_part1()\npart2_result = solver.solve_part2()\nprint(\"Solution to Part 1:\", part1_result)\nprint(\"Solution to Part 2:\", part2_result)",
        "detail": "2023.day05.Day5",
        "documentation": {}
    },
    {
        "label": "part1_result",
        "kind": 5,
        "importPath": "2023.day05.Day5",
        "description": "2023.day05.Day5",
        "peekOfCode": "part1_result = solver.solve_part1()\npart2_result = solver.solve_part2()\nprint(\"Solution to Part 1:\", part1_result)\nprint(\"Solution to Part 2:\", part2_result)",
        "detail": "2023.day05.Day5",
        "documentation": {}
    },
    {
        "label": "part2_result",
        "kind": 5,
        "importPath": "2023.day05.Day5",
        "description": "2023.day05.Day5",
        "peekOfCode": "part2_result = solver.solve_part2()\nprint(\"Solution to Part 1:\", part1_result)\nprint(\"Solution to Part 2:\", part2_result)",
        "detail": "2023.day05.Day5",
        "documentation": {}
    },
    {
        "label": "Day6",
        "kind": 6,
        "importPath": "2023.day06.Day6",
        "description": "2023.day06.Day6",
        "peekOfCode": "class Day6:\n    def __init__(self):\n        self.input_content = None\n    def solve_part1(self):\n        races = self.parseInput()\n        total = 0\n        for race in races:\n            wins = 0\n            for speed in range(race[0] + 1):\n                seconds = (race[0] - speed)",
        "detail": "2023.day06.Day6",
        "documentation": {}
    },
    {
        "label": "solver",
        "kind": 5,
        "importPath": "2023.day06.Day6",
        "description": "2023.day06.Day6",
        "peekOfCode": "solver = Day6()\nsolver.loadInputFiles()\npart1_result = solver.solve_part1()\npart2_result = solver.solve_part2()\nprint(\"Solution to Part 1:\", part1_result)\nprint(\"Solution to Part 2:\", part2_result)",
        "detail": "2023.day06.Day6",
        "documentation": {}
    },
    {
        "label": "part1_result",
        "kind": 5,
        "importPath": "2023.day06.Day6",
        "description": "2023.day06.Day6",
        "peekOfCode": "part1_result = solver.solve_part1()\npart2_result = solver.solve_part2()\nprint(\"Solution to Part 1:\", part1_result)\nprint(\"Solution to Part 2:\", part2_result)",
        "detail": "2023.day06.Day6",
        "documentation": {}
    },
    {
        "label": "part2_result",
        "kind": 5,
        "importPath": "2023.day06.Day6",
        "description": "2023.day06.Day6",
        "peekOfCode": "part2_result = solver.solve_part2()\nprint(\"Solution to Part 1:\", part1_result)\nprint(\"Solution to Part 2:\", part2_result)",
        "detail": "2023.day06.Day6",
        "documentation": {}
    },
    {
        "label": "Day7",
        "kind": 6,
        "importPath": "2023.day07.Day7",
        "description": "2023.day07.Day7",
        "peekOfCode": "class Day7:\n    def __init__(self):\n        self.input_content = None\n    def solve(self, sortFunc):\n        cards = []\n        for line in self.input_content.splitlines():\n            data = line.split(\" \")\n            cards.append((data[0], data[1]))\n        cards = sorted(cards, key=lambda c:sortFunc(c[0]))\n        sum = 0",
        "detail": "2023.day07.Day7",
        "documentation": {}
    },
    {
        "label": "solver",
        "kind": 5,
        "importPath": "2023.day07.Day7",
        "description": "2023.day07.Day7",
        "peekOfCode": "solver = Day7()\nsolver.loadInputFiles()\npart1_result = solver.solve_part1()\npart2_result = solver.solve_part2()\nprint(\"Solution to Part 1:\", part1_result)\nprint(\"Solution to Part 2:\", part2_result)",
        "detail": "2023.day07.Day7",
        "documentation": {}
    },
    {
        "label": "part1_result",
        "kind": 5,
        "importPath": "2023.day07.Day7",
        "description": "2023.day07.Day7",
        "peekOfCode": "part1_result = solver.solve_part1()\npart2_result = solver.solve_part2()\nprint(\"Solution to Part 1:\", part1_result)\nprint(\"Solution to Part 2:\", part2_result)",
        "detail": "2023.day07.Day7",
        "documentation": {}
    },
    {
        "label": "part2_result",
        "kind": 5,
        "importPath": "2023.day07.Day7",
        "description": "2023.day07.Day7",
        "peekOfCode": "part2_result = solver.solve_part2()\nprint(\"Solution to Part 1:\", part1_result)\nprint(\"Solution to Part 2:\", part2_result)",
        "detail": "2023.day07.Day7",
        "documentation": {}
    },
    {
        "label": "Day8",
        "kind": 6,
        "importPath": "2023.day08.Day8",
        "description": "2023.day08.Day8",
        "peekOfCode": "class Day8:\n    def __init__(self):\n        self.input_content = None\n    def solve_part1(self):\n        movements = self.input_content.split(\"\\n\")[0].strip()\n        movements = list(movements)\n        paths = self.input_content.split(\"\\n\")[2:]\n        mapping = {}\n        start = 'AAA'\n        end = 'ZZZ'",
        "detail": "2023.day08.Day8",
        "documentation": {}
    },
    {
        "label": "solver",
        "kind": 5,
        "importPath": "2023.day08.Day8",
        "description": "2023.day08.Day8",
        "peekOfCode": "solver = Day8()\nsolver.loadInputFiles()\npart1_result = solver.solve_part1()\npart2_result = solver.solve_part2()\nprint(\"Solution to Part 1:\", part1_result)\nprint(\"Solution to Part 2:\", part2_result)",
        "detail": "2023.day08.Day8",
        "documentation": {}
    },
    {
        "label": "part1_result",
        "kind": 5,
        "importPath": "2023.day08.Day8",
        "description": "2023.day08.Day8",
        "peekOfCode": "part1_result = solver.solve_part1()\npart2_result = solver.solve_part2()\nprint(\"Solution to Part 1:\", part1_result)\nprint(\"Solution to Part 2:\", part2_result)",
        "detail": "2023.day08.Day8",
        "documentation": {}
    },
    {
        "label": "part2_result",
        "kind": 5,
        "importPath": "2023.day08.Day8",
        "description": "2023.day08.Day8",
        "peekOfCode": "part2_result = solver.solve_part2()\nprint(\"Solution to Part 1:\", part1_result)\nprint(\"Solution to Part 2:\", part2_result)",
        "detail": "2023.day08.Day8",
        "documentation": {}
    },
    {
        "label": "Day9",
        "kind": 6,
        "importPath": "2023.day09.Day9",
        "description": "2023.day09.Day9",
        "peekOfCode": "class Day9:\n    def __init__(self):\n        self.input_content = None\n    def solve(self, part1): \n        sum = 0\n        for line in self.input_content.splitlines():\n            values = [line := [int(x) for x in line.split(\" \")]]\n            while any(line := [j - i for i, j in zip(line, line[1:])]):\n                values.append(line)\n            increment = 0",
        "detail": "2023.day09.Day9",
        "documentation": {}
    },
    {
        "label": "solver",
        "kind": 5,
        "importPath": "2023.day09.Day9",
        "description": "2023.day09.Day9",
        "peekOfCode": "solver = Day9()\nsolver.loadInputFiles()\npart1_result = solver.solve(True)\npart2_result = solver.solve(False)\nprint(\"Solution to Part 1:\", part1_result)\nprint(\"Solution to Part 2:\", part2_result)",
        "detail": "2023.day09.Day9",
        "documentation": {}
    },
    {
        "label": "part1_result",
        "kind": 5,
        "importPath": "2023.day09.Day9",
        "description": "2023.day09.Day9",
        "peekOfCode": "part1_result = solver.solve(True)\npart2_result = solver.solve(False)\nprint(\"Solution to Part 1:\", part1_result)\nprint(\"Solution to Part 2:\", part2_result)",
        "detail": "2023.day09.Day9",
        "documentation": {}
    },
    {
        "label": "part2_result",
        "kind": 5,
        "importPath": "2023.day09.Day9",
        "description": "2023.day09.Day9",
        "peekOfCode": "part2_result = solver.solve(False)\nprint(\"Solution to Part 1:\", part1_result)\nprint(\"Solution to Part 2:\", part2_result)",
        "detail": "2023.day09.Day9",
        "documentation": {}
    },
    {
        "label": "Day10",
        "kind": 6,
        "importPath": "2023.day10.Day10",
        "description": "2023.day10.Day10",
        "peekOfCode": "class Day10:\n    def __init__(self):\n        self.input_content = None\n        #E W N S\n        #L R U D\n        self.offset = { '|' : (0, 0, 1, 1), #'|' \n                        '-' : (1, 1, 0, 0), #'-'\n                        'L' : (1, 0, 1, 0), #'L'\n                        'J' : (0, 1, 1, 0), #'J'\n                        '7' : (0, 1, 0, 1), #'7'",
        "detail": "2023.day10.Day10",
        "documentation": {}
    },
    {
        "label": "solver",
        "kind": 5,
        "importPath": "2023.day10.Day10",
        "description": "2023.day10.Day10",
        "peekOfCode": "solver = Day10()\nsolver.loadInputFiles()\npart1_result = solver.solve_part1()\nprint(\"Solution to Part 1:\", part1_result)\npart2_result = solver.solve_part2()\nprint(\"Solution to Part 2:\", part2_result)",
        "detail": "2023.day10.Day10",
        "documentation": {}
    },
    {
        "label": "part1_result",
        "kind": 5,
        "importPath": "2023.day10.Day10",
        "description": "2023.day10.Day10",
        "peekOfCode": "part1_result = solver.solve_part1()\nprint(\"Solution to Part 1:\", part1_result)\npart2_result = solver.solve_part2()\nprint(\"Solution to Part 2:\", part2_result)",
        "detail": "2023.day10.Day10",
        "documentation": {}
    },
    {
        "label": "part2_result",
        "kind": 5,
        "importPath": "2023.day10.Day10",
        "description": "2023.day10.Day10",
        "peekOfCode": "part2_result = solver.solve_part2()\nprint(\"Solution to Part 2:\", part2_result)",
        "detail": "2023.day10.Day10",
        "documentation": {}
    },
    {
        "label": "Day11",
        "kind": 6,
        "importPath": "2023.day11.Day11",
        "description": "2023.day11.Day11",
        "peekOfCode": "class Day11:\n    def __init__(self):\n        self.input_content = None\n        self.grid = []\n    def solve(self, part1):\n        step = 2 if part1 else 1000000\n        self.makeGrid(part1)\n        galaxies = self.findGalaxies()\n        pairs = set()  \n        for i, galaxy in enumerate(galaxies):",
        "detail": "2023.day11.Day11",
        "documentation": {}
    },
    {
        "label": "solver",
        "kind": 5,
        "importPath": "2023.day11.Day11",
        "description": "2023.day11.Day11",
        "peekOfCode": "solver = Day11()\nsolver.loadInputFiles()\npart1_result = solver.solve(True)\npart2_result = solver.solve(False)\nprint(\"Solution to Part 1:\", part1_result)\nprint(\"Solution to Part 2:\", part2_result)",
        "detail": "2023.day11.Day11",
        "documentation": {}
    },
    {
        "label": "part1_result",
        "kind": 5,
        "importPath": "2023.day11.Day11",
        "description": "2023.day11.Day11",
        "peekOfCode": "part1_result = solver.solve(True)\npart2_result = solver.solve(False)\nprint(\"Solution to Part 1:\", part1_result)\nprint(\"Solution to Part 2:\", part2_result)",
        "detail": "2023.day11.Day11",
        "documentation": {}
    },
    {
        "label": "part2_result",
        "kind": 5,
        "importPath": "2023.day11.Day11",
        "description": "2023.day11.Day11",
        "peekOfCode": "part2_result = solver.solve(False)\nprint(\"Solution to Part 1:\", part1_result)\nprint(\"Solution to Part 2:\", part2_result)",
        "detail": "2023.day11.Day11",
        "documentation": {}
    },
    {
        "label": "Day12",
        "kind": 6,
        "importPath": "2023.day12.Day12",
        "description": "2023.day12.Day12",
        "peekOfCode": "class Day12:\n    def __init__(self):\n        self.input_content = None\n        self.cache = {}\n    def solve_part1(self):\n        res = 0\n        for line in self.input_content.splitlines():\n            onsens, groups = line.split()\n            groups = tuple(map(int, groups.split(\",\")))\n            res += self.permutations(onsens, groups)",
        "detail": "2023.day12.Day12",
        "documentation": {}
    },
    {
        "label": "solver",
        "kind": 5,
        "importPath": "2023.day12.Day12",
        "description": "2023.day12.Day12",
        "peekOfCode": "solver = Day12()\nsolver.loadInputFiles()\npart1_result = solver.solve_part1()\nprint(\"Solution to Part 1:\", part1_result)\npart2_result = solver.solve_part2()\nprint(\"Solution to Part 2:\", part2_result)",
        "detail": "2023.day12.Day12",
        "documentation": {}
    },
    {
        "label": "part1_result",
        "kind": 5,
        "importPath": "2023.day12.Day12",
        "description": "2023.day12.Day12",
        "peekOfCode": "part1_result = solver.solve_part1()\nprint(\"Solution to Part 1:\", part1_result)\npart2_result = solver.solve_part2()\nprint(\"Solution to Part 2:\", part2_result)",
        "detail": "2023.day12.Day12",
        "documentation": {}
    },
    {
        "label": "part2_result",
        "kind": 5,
        "importPath": "2023.day12.Day12",
        "description": "2023.day12.Day12",
        "peekOfCode": "part2_result = solver.solve_part2()\nprint(\"Solution to Part 2:\", part2_result)",
        "detail": "2023.day12.Day12",
        "documentation": {}
    },
    {
        "label": "Day13",
        "kind": 6,
        "importPath": "2023.day13.Day13",
        "description": "2023.day13.Day13",
        "peekOfCode": "class Day13:\n    def __init__(self):\n        self.input_content = None\n    def solve(self, part2):\n        total_sum = 0\n        patterns = self.input_content.strip().split(\"\\n\\n\")\n        for pattern in patterns:\n            grid = [list(row) for row in pattern.split(\"\\n\")]\n            total_sum += self.evaluateRows(grid, part2) + self.evaluateColumns(grid, part2)\n        return total_sum",
        "detail": "2023.day13.Day13",
        "documentation": {}
    },
    {
        "label": "solver",
        "kind": 5,
        "importPath": "2023.day13.Day13",
        "description": "2023.day13.Day13",
        "peekOfCode": "solver = Day13()\nsolver.loadInputFiles()\npart1_result = solver.solve(False)\npart2_result = solver.solve(True)\nprint(\"Solution to Part 1:\", part1_result)\nprint(\"Solution to Part 2:\", part2_result)",
        "detail": "2023.day13.Day13",
        "documentation": {}
    },
    {
        "label": "part1_result",
        "kind": 5,
        "importPath": "2023.day13.Day13",
        "description": "2023.day13.Day13",
        "peekOfCode": "part1_result = solver.solve(False)\npart2_result = solver.solve(True)\nprint(\"Solution to Part 1:\", part1_result)\nprint(\"Solution to Part 2:\", part2_result)",
        "detail": "2023.day13.Day13",
        "documentation": {}
    },
    {
        "label": "part2_result",
        "kind": 5,
        "importPath": "2023.day13.Day13",
        "description": "2023.day13.Day13",
        "peekOfCode": "part2_result = solver.solve(True)\nprint(\"Solution to Part 1:\", part1_result)\nprint(\"Solution to Part 2:\", part2_result)",
        "detail": "2023.day13.Day13",
        "documentation": {}
    },
    {
        "label": "Day14",
        "kind": 6,
        "importPath": "2023.day14.Day14",
        "description": "2023.day14.Day14",
        "peekOfCode": "class Day14:\n    def __init__(self):\n        self.input_content = None\n    def solve_part1(self):\n        grid = [[c for c in line] for line in self.input_content.split(\"\\n\")]\n        grid = self.flipGravity(grid)\n        return self.score(grid)\n    def solve_part2(self):\n        grid = [[c for c in line] for line in self.input_content.split(\"\\n\")]\n        res = {}",
        "detail": "2023.day14.Day14",
        "documentation": {}
    },
    {
        "label": "solver",
        "kind": 5,
        "importPath": "2023.day14.Day14",
        "description": "2023.day14.Day14",
        "peekOfCode": "solver = Day14()\nsolver.loadInputFiles()\npart1_result = solver.solve_part1()\nprint(\"Solution to Part 1:\", part1_result)\npart2_result = solver.solve_part2()\nprint(\"Solution to Part 2:\", part2_result)",
        "detail": "2023.day14.Day14",
        "documentation": {}
    },
    {
        "label": "part1_result",
        "kind": 5,
        "importPath": "2023.day14.Day14",
        "description": "2023.day14.Day14",
        "peekOfCode": "part1_result = solver.solve_part1()\nprint(\"Solution to Part 1:\", part1_result)\npart2_result = solver.solve_part2()\nprint(\"Solution to Part 2:\", part2_result)",
        "detail": "2023.day14.Day14",
        "documentation": {}
    },
    {
        "label": "part2_result",
        "kind": 5,
        "importPath": "2023.day14.Day14",
        "description": "2023.day14.Day14",
        "peekOfCode": "part2_result = solver.solve_part2()\nprint(\"Solution to Part 2:\", part2_result)",
        "detail": "2023.day14.Day14",
        "documentation": {}
    },
    {
        "label": "Day15",
        "kind": 6,
        "importPath": "2023.day15.Day15",
        "description": "2023.day15.Day15",
        "peekOfCode": "class Day15:\n    def __init__(self):\n        self.input_content = None\n    def solve_part1(self):\n        return sum(self.hash(word) for word in self.input_content.split(\",\"))\n    def hash(self, word):\n        cres = 0\n        for c in word:\n            cres += ord(c)\n            cres *= 17",
        "detail": "2023.day15.Day15",
        "documentation": {}
    },
    {
        "label": "solver",
        "kind": 5,
        "importPath": "2023.day15.Day15",
        "description": "2023.day15.Day15",
        "peekOfCode": "solver = Day15()\nsolver.loadInputFiles()\npart1_result = solver.solve_part1()\nprint(\"Solution to Part 1:\", part1_result)\npart2_result = solver.solve_part2()\nprint(\"Solution to Part 2:\", part2_result)",
        "detail": "2023.day15.Day15",
        "documentation": {}
    },
    {
        "label": "part1_result",
        "kind": 5,
        "importPath": "2023.day15.Day15",
        "description": "2023.day15.Day15",
        "peekOfCode": "part1_result = solver.solve_part1()\nprint(\"Solution to Part 1:\", part1_result)\npart2_result = solver.solve_part2()\nprint(\"Solution to Part 2:\", part2_result)",
        "detail": "2023.day15.Day15",
        "documentation": {}
    },
    {
        "label": "part2_result",
        "kind": 5,
        "importPath": "2023.day15.Day15",
        "description": "2023.day15.Day15",
        "peekOfCode": "part2_result = solver.solve_part2()\nprint(\"Solution to Part 2:\", part2_result)",
        "detail": "2023.day15.Day15",
        "documentation": {}
    },
    {
        "label": "Day16",
        "kind": 6,
        "importPath": "2023.day16.Day16",
        "description": "2023.day16.Day16",
        "peekOfCode": "class Day16:\n    def __init__(self):\n        self.input_content = None\n        self.visited = set()\n    def solve_part1(self):\n        self.loadGrid()\n        start = (-1, 0, (1, 0))\n        return self.traverse(start)\n    def traverse(self, start):\n        stack = [start]",
        "detail": "2023.day16.Day16",
        "documentation": {}
    },
    {
        "label": "solver",
        "kind": 5,
        "importPath": "2023.day16.Day16",
        "description": "2023.day16.Day16",
        "peekOfCode": "solver = Day16()\nsolver.loadInputFiles()\npart1_result = solver.solve_part1()\nprint(\"Solution to Part 1:\", part1_result)\npart2_result = solver.solve_part2()\nprint(\"Solution to Part 2:\", part2_result)\n#7183",
        "detail": "2023.day16.Day16",
        "documentation": {}
    },
    {
        "label": "part1_result",
        "kind": 5,
        "importPath": "2023.day16.Day16",
        "description": "2023.day16.Day16",
        "peekOfCode": "part1_result = solver.solve_part1()\nprint(\"Solution to Part 1:\", part1_result)\npart2_result = solver.solve_part2()\nprint(\"Solution to Part 2:\", part2_result)\n#7183",
        "detail": "2023.day16.Day16",
        "documentation": {}
    },
    {
        "label": "part2_result",
        "kind": 5,
        "importPath": "2023.day16.Day16",
        "description": "2023.day16.Day16",
        "peekOfCode": "part2_result = solver.solve_part2()\nprint(\"Solution to Part 2:\", part2_result)\n#7183",
        "detail": "2023.day16.Day16",
        "documentation": {}
    },
    {
        "label": "Day17",
        "kind": 6,
        "importPath": "2023.day17.Day17",
        "description": "2023.day17.Day17",
        "peekOfCode": "class Day17:\n    def __init__(self):\n        self.input_content = None\n    def solve(self, MAX_STEPS, STEPS_REQUIRED_TO_TURN, MIN_STEPS_WITHOUT_TURN_TO_STOP):\n        self.loadGrid()\n        visited = set()\n        pq = [(0, 0, 0, 0, 0, 0)]  # heat loss, x, y, direction_x, direction_y, steps\n        while pq:\n            heat_loss, x, y, dx, dy, steps = heappop(pq)\n            if y == len(self.grid) - 1 and x == len(self.grid[0]) - 1 and steps >= MIN_STEPS_WITHOUT_TURN_TO_STOP:",
        "detail": "2023.day17.Day17",
        "documentation": {}
    },
    {
        "label": "solver",
        "kind": 5,
        "importPath": "2023.day17.Day17",
        "description": "2023.day17.Day17",
        "peekOfCode": "solver = Day17()\nsolver.loadInputFiles()\nstart_time_part1 = time.time()\npart1_result = solver.solve(3, 0, 0)\nend_time_part1 = time.time()\nprint(\"Solution to Part 1:\", part1_result, \"completed in\", round((end_time_part1 - start_time_part1) * 1000), \"ms\")\nstart_time_part2 = time.time()\npart2_result = solver.solve(10, 4, 4)\nend_time_part2 = time.time()\nprint(\"Solution to Part 2:\", part2_result, \"completed in\", round((end_time_part2 - start_time_part2) * 1000), \"ms\")",
        "detail": "2023.day17.Day17",
        "documentation": {}
    },
    {
        "label": "start_time_part1",
        "kind": 5,
        "importPath": "2023.day17.Day17",
        "description": "2023.day17.Day17",
        "peekOfCode": "start_time_part1 = time.time()\npart1_result = solver.solve(3, 0, 0)\nend_time_part1 = time.time()\nprint(\"Solution to Part 1:\", part1_result, \"completed in\", round((end_time_part1 - start_time_part1) * 1000), \"ms\")\nstart_time_part2 = time.time()\npart2_result = solver.solve(10, 4, 4)\nend_time_part2 = time.time()\nprint(\"Solution to Part 2:\", part2_result, \"completed in\", round((end_time_part2 - start_time_part2) * 1000), \"ms\")",
        "detail": "2023.day17.Day17",
        "documentation": {}
    },
    {
        "label": "part1_result",
        "kind": 5,
        "importPath": "2023.day17.Day17",
        "description": "2023.day17.Day17",
        "peekOfCode": "part1_result = solver.solve(3, 0, 0)\nend_time_part1 = time.time()\nprint(\"Solution to Part 1:\", part1_result, \"completed in\", round((end_time_part1 - start_time_part1) * 1000), \"ms\")\nstart_time_part2 = time.time()\npart2_result = solver.solve(10, 4, 4)\nend_time_part2 = time.time()\nprint(\"Solution to Part 2:\", part2_result, \"completed in\", round((end_time_part2 - start_time_part2) * 1000), \"ms\")",
        "detail": "2023.day17.Day17",
        "documentation": {}
    },
    {
        "label": "end_time_part1",
        "kind": 5,
        "importPath": "2023.day17.Day17",
        "description": "2023.day17.Day17",
        "peekOfCode": "end_time_part1 = time.time()\nprint(\"Solution to Part 1:\", part1_result, \"completed in\", round((end_time_part1 - start_time_part1) * 1000), \"ms\")\nstart_time_part2 = time.time()\npart2_result = solver.solve(10, 4, 4)\nend_time_part2 = time.time()\nprint(\"Solution to Part 2:\", part2_result, \"completed in\", round((end_time_part2 - start_time_part2) * 1000), \"ms\")",
        "detail": "2023.day17.Day17",
        "documentation": {}
    },
    {
        "label": "start_time_part2",
        "kind": 5,
        "importPath": "2023.day17.Day17",
        "description": "2023.day17.Day17",
        "peekOfCode": "start_time_part2 = time.time()\npart2_result = solver.solve(10, 4, 4)\nend_time_part2 = time.time()\nprint(\"Solution to Part 2:\", part2_result, \"completed in\", round((end_time_part2 - start_time_part2) * 1000), \"ms\")",
        "detail": "2023.day17.Day17",
        "documentation": {}
    },
    {
        "label": "part2_result",
        "kind": 5,
        "importPath": "2023.day17.Day17",
        "description": "2023.day17.Day17",
        "peekOfCode": "part2_result = solver.solve(10, 4, 4)\nend_time_part2 = time.time()\nprint(\"Solution to Part 2:\", part2_result, \"completed in\", round((end_time_part2 - start_time_part2) * 1000), \"ms\")",
        "detail": "2023.day17.Day17",
        "documentation": {}
    },
    {
        "label": "end_time_part2",
        "kind": 5,
        "importPath": "2023.day17.Day17",
        "description": "2023.day17.Day17",
        "peekOfCode": "end_time_part2 = time.time()\nprint(\"Solution to Part 2:\", part2_result, \"completed in\", round((end_time_part2 - start_time_part2) * 1000), \"ms\")",
        "detail": "2023.day17.Day17",
        "documentation": {}
    },
    {
        "label": "Day18",
        "kind": 6,
        "importPath": "2023.day18.Day18",
        "description": "2023.day18.Day18",
        "peekOfCode": "class Day18:\n    def __init__(self):\n        self.input_content = None\n    def solve_part1(self):\n        points = [(0, 0)]\n        movement = {\n            'U': (0, -1),\n            'D': (0, 1),\n            'L': (-1, 0),\n            'R': (1, 0)",
        "detail": "2023.day18.Day18",
        "documentation": {}
    },
    {
        "label": "solver",
        "kind": 5,
        "importPath": "2023.day18.Day18",
        "description": "2023.day18.Day18",
        "peekOfCode": "solver = Day18()\nsolver.loadInputFiles()\npart1_result = solver.solve_part1()\nprint(\"Solution to Part 1:\", part1_result)\npart2_result = solver.solve_part2()\nprint(\"Solution to Part 2:\", part2_result)",
        "detail": "2023.day18.Day18",
        "documentation": {}
    },
    {
        "label": "part1_result",
        "kind": 5,
        "importPath": "2023.day18.Day18",
        "description": "2023.day18.Day18",
        "peekOfCode": "part1_result = solver.solve_part1()\nprint(\"Solution to Part 1:\", part1_result)\npart2_result = solver.solve_part2()\nprint(\"Solution to Part 2:\", part2_result)",
        "detail": "2023.day18.Day18",
        "documentation": {}
    },
    {
        "label": "part2_result",
        "kind": 5,
        "importPath": "2023.day18.Day18",
        "description": "2023.day18.Day18",
        "peekOfCode": "part2_result = solver.solve_part2()\nprint(\"Solution to Part 2:\", part2_result)",
        "detail": "2023.day18.Day18",
        "documentation": {}
    },
    {
        "label": "AOCInputGrabber",
        "kind": 6,
        "importPath": "2023.day19.AOCInputGrabber",
        "description": "2023.day19.AOCInputGrabber",
        "peekOfCode": "class AOCInputGrabber:\n    def __init__(self, year, day):\n        self.year = year\n        self.day = day\n    def grab_input(self):\n        session_key = os.environ.get('AOC_SESSION_KEY')\n        url = f'https://adventofcode.com/{self.year}/day/{self.day}/input'\n        headers = {'cookie': f'session={session_key}'}\n        response = requests.get(url, headers=headers)\n        if response.status_code == 200:",
        "detail": "2023.day19.AOCInputGrabber",
        "documentation": {}
    },
    {
        "label": "Day19",
        "kind": 6,
        "importPath": "2023.day19.Day19",
        "description": "2023.day19.Day19",
        "peekOfCode": "class Day19:\n    def __init__(self):\n        self.input_content = None\n        self.DAY = 19\n        self.YEAR = 2023\n        self.aoc_utils = AOCInputGrabber(self.YEAR, self.DAY)\n    def solve_part1(self):\n        res = 0\n        for line in self.dataset:\n            dataset = self.parseDataset(line)",
        "detail": "2023.day19.Day19",
        "documentation": {}
    },
    {
        "label": "solver",
        "kind": 5,
        "importPath": "2023.day19.Day19",
        "description": "2023.day19.Day19",
        "peekOfCode": "solver = Day19()\nsolver.loadInputFiles()\nstart_time_part1 = time.time()\npart1_result = solver.solve_part1()\nend_time_part1 = time.time()\nprint(\"Solution to Part 1:\", part1_result, \"completed in\", round((end_time_part1 - start_time_part1) * 1000), \"ms\")\nstart_time_part2 = time.time()\npart2_result = solver.solve_part2()\nend_time_part2 = time.time()\nprint(\"Solution to Part 2:\", part2_result, \"completed in\", round((end_time_part2 - start_time_part2) * 1000), \"ms\")",
        "detail": "2023.day19.Day19",
        "documentation": {}
    },
    {
        "label": "start_time_part1",
        "kind": 5,
        "importPath": "2023.day19.Day19",
        "description": "2023.day19.Day19",
        "peekOfCode": "start_time_part1 = time.time()\npart1_result = solver.solve_part1()\nend_time_part1 = time.time()\nprint(\"Solution to Part 1:\", part1_result, \"completed in\", round((end_time_part1 - start_time_part1) * 1000), \"ms\")\nstart_time_part2 = time.time()\npart2_result = solver.solve_part2()\nend_time_part2 = time.time()\nprint(\"Solution to Part 2:\", part2_result, \"completed in\", round((end_time_part2 - start_time_part2) * 1000), \"ms\")",
        "detail": "2023.day19.Day19",
        "documentation": {}
    },
    {
        "label": "part1_result",
        "kind": 5,
        "importPath": "2023.day19.Day19",
        "description": "2023.day19.Day19",
        "peekOfCode": "part1_result = solver.solve_part1()\nend_time_part1 = time.time()\nprint(\"Solution to Part 1:\", part1_result, \"completed in\", round((end_time_part1 - start_time_part1) * 1000), \"ms\")\nstart_time_part2 = time.time()\npart2_result = solver.solve_part2()\nend_time_part2 = time.time()\nprint(\"Solution to Part 2:\", part2_result, \"completed in\", round((end_time_part2 - start_time_part2) * 1000), \"ms\")",
        "detail": "2023.day19.Day19",
        "documentation": {}
    },
    {
        "label": "end_time_part1",
        "kind": 5,
        "importPath": "2023.day19.Day19",
        "description": "2023.day19.Day19",
        "peekOfCode": "end_time_part1 = time.time()\nprint(\"Solution to Part 1:\", part1_result, \"completed in\", round((end_time_part1 - start_time_part1) * 1000), \"ms\")\nstart_time_part2 = time.time()\npart2_result = solver.solve_part2()\nend_time_part2 = time.time()\nprint(\"Solution to Part 2:\", part2_result, \"completed in\", round((end_time_part2 - start_time_part2) * 1000), \"ms\")",
        "detail": "2023.day19.Day19",
        "documentation": {}
    },
    {
        "label": "start_time_part2",
        "kind": 5,
        "importPath": "2023.day19.Day19",
        "description": "2023.day19.Day19",
        "peekOfCode": "start_time_part2 = time.time()\npart2_result = solver.solve_part2()\nend_time_part2 = time.time()\nprint(\"Solution to Part 2:\", part2_result, \"completed in\", round((end_time_part2 - start_time_part2) * 1000), \"ms\")",
        "detail": "2023.day19.Day19",
        "documentation": {}
    },
    {
        "label": "part2_result",
        "kind": 5,
        "importPath": "2023.day19.Day19",
        "description": "2023.day19.Day19",
        "peekOfCode": "part2_result = solver.solve_part2()\nend_time_part2 = time.time()\nprint(\"Solution to Part 2:\", part2_result, \"completed in\", round((end_time_part2 - start_time_part2) * 1000), \"ms\")",
        "detail": "2023.day19.Day19",
        "documentation": {}
    },
    {
        "label": "end_time_part2",
        "kind": 5,
        "importPath": "2023.day19.Day19",
        "description": "2023.day19.Day19",
        "peekOfCode": "end_time_part2 = time.time()\nprint(\"Solution to Part 2:\", part2_result, \"completed in\", round((end_time_part2 - start_time_part2) * 1000), \"ms\")",
        "detail": "2023.day19.Day19",
        "documentation": {}
    },
    {
        "label": "AOCInputGrabber",
        "kind": 6,
        "importPath": "2023.day20.AOCInputGrabber",
        "description": "2023.day20.AOCInputGrabber",
        "peekOfCode": "class AOCInputGrabber:\n    def __init__(self, year, day):\n        self.year = year\n        self.day = day\n    def grab_input(self):\n        session_key = os.environ.get('AOC_SESSION_KEY')\n        url = f'https://adventofcode.com/{self.year}/day/{self.day}/input'\n        headers = {'cookie': f'session={session_key}'}\n        response = requests.get(url, headers=headers)\n        if response.status_code == 200:",
        "detail": "2023.day20.AOCInputGrabber",
        "documentation": {}
    },
    {
        "label": "Day20",
        "kind": 6,
        "importPath": "2023.day20.Day20",
        "description": "2023.day20.Day20",
        "peekOfCode": "class Day20:\n    def __init__(self):\n        self.input_content = None\n        self.DAY = 20\n        self.YEAR = 2023\n        self.aoc_utils = AOCInputGrabber(self.YEAR, self.DAY)\n    def solve_part1(self):\n        modules = {}\n        broadcast_targets = []\n        for line in self.input_content.splitlines():",
        "detail": "2023.day20.Day20",
        "documentation": {}
    },
    {
        "label": "solver",
        "kind": 5,
        "importPath": "2023.day20.Day20",
        "description": "2023.day20.Day20",
        "peekOfCode": "solver = Day20()\nsolver.loadInputFiles()\nstart_time_part1 = time.time()\npart1_result = solver.solve_part1()\nend_time_part1 = time.time()\nprint(\"Solution to Part 1:\", part1_result, \"completed in\", round((end_time_part1 - start_time_part1) * 1000), \"ms\")\nstart_time_part2 = time.time()\npart2_result = solver.solve_part2()\nend_time_part2 = time.time()\nprint(\"Solution to Part 2:\", part2_result, \"completed in\", round((end_time_part2 - start_time_part2) * 1000), \"ms\")",
        "detail": "2023.day20.Day20",
        "documentation": {}
    },
    {
        "label": "start_time_part1",
        "kind": 5,
        "importPath": "2023.day20.Day20",
        "description": "2023.day20.Day20",
        "peekOfCode": "start_time_part1 = time.time()\npart1_result = solver.solve_part1()\nend_time_part1 = time.time()\nprint(\"Solution to Part 1:\", part1_result, \"completed in\", round((end_time_part1 - start_time_part1) * 1000), \"ms\")\nstart_time_part2 = time.time()\npart2_result = solver.solve_part2()\nend_time_part2 = time.time()\nprint(\"Solution to Part 2:\", part2_result, \"completed in\", round((end_time_part2 - start_time_part2) * 1000), \"ms\")",
        "detail": "2023.day20.Day20",
        "documentation": {}
    },
    {
        "label": "part1_result",
        "kind": 5,
        "importPath": "2023.day20.Day20",
        "description": "2023.day20.Day20",
        "peekOfCode": "part1_result = solver.solve_part1()\nend_time_part1 = time.time()\nprint(\"Solution to Part 1:\", part1_result, \"completed in\", round((end_time_part1 - start_time_part1) * 1000), \"ms\")\nstart_time_part2 = time.time()\npart2_result = solver.solve_part2()\nend_time_part2 = time.time()\nprint(\"Solution to Part 2:\", part2_result, \"completed in\", round((end_time_part2 - start_time_part2) * 1000), \"ms\")",
        "detail": "2023.day20.Day20",
        "documentation": {}
    },
    {
        "label": "end_time_part1",
        "kind": 5,
        "importPath": "2023.day20.Day20",
        "description": "2023.day20.Day20",
        "peekOfCode": "end_time_part1 = time.time()\nprint(\"Solution to Part 1:\", part1_result, \"completed in\", round((end_time_part1 - start_time_part1) * 1000), \"ms\")\nstart_time_part2 = time.time()\npart2_result = solver.solve_part2()\nend_time_part2 = time.time()\nprint(\"Solution to Part 2:\", part2_result, \"completed in\", round((end_time_part2 - start_time_part2) * 1000), \"ms\")",
        "detail": "2023.day20.Day20",
        "documentation": {}
    },
    {
        "label": "start_time_part2",
        "kind": 5,
        "importPath": "2023.day20.Day20",
        "description": "2023.day20.Day20",
        "peekOfCode": "start_time_part2 = time.time()\npart2_result = solver.solve_part2()\nend_time_part2 = time.time()\nprint(\"Solution to Part 2:\", part2_result, \"completed in\", round((end_time_part2 - start_time_part2) * 1000), \"ms\")",
        "detail": "2023.day20.Day20",
        "documentation": {}
    },
    {
        "label": "part2_result",
        "kind": 5,
        "importPath": "2023.day20.Day20",
        "description": "2023.day20.Day20",
        "peekOfCode": "part2_result = solver.solve_part2()\nend_time_part2 = time.time()\nprint(\"Solution to Part 2:\", part2_result, \"completed in\", round((end_time_part2 - start_time_part2) * 1000), \"ms\")",
        "detail": "2023.day20.Day20",
        "documentation": {}
    },
    {
        "label": "end_time_part2",
        "kind": 5,
        "importPath": "2023.day20.Day20",
        "description": "2023.day20.Day20",
        "peekOfCode": "end_time_part2 = time.time()\nprint(\"Solution to Part 2:\", part2_result, \"completed in\", round((end_time_part2 - start_time_part2) * 1000), \"ms\")",
        "detail": "2023.day20.Day20",
        "documentation": {}
    },
    {
        "label": "Module",
        "kind": 6,
        "importPath": "2023.day20.Module",
        "description": "2023.day20.Module",
        "peekOfCode": "class Module:\n    def __init__(self, name, type, outputs):\n        self.name = name\n        self.type = type\n        self.outputs = outputs\n        if type == \"%\":\n            self.memory = \"off\"\n            return \n        self.memory = {}",
        "detail": "2023.day20.Module",
        "documentation": {}
    },
    {
        "label": "AOCInputGrabber",
        "kind": 6,
        "importPath": "2023.day21.AOCInputGrabber",
        "description": "2023.day21.AOCInputGrabber",
        "peekOfCode": "class AOCInputGrabber:\n    def __init__(self, year, day):\n        self.year = year\n        self.day = day\n    def grab_input(self):\n        session_key = os.environ.get('AOC_SESSION_KEY')\n        url = f'https://adventofcode.com/{self.year}/day/{self.day}/input'\n        headers = {'cookie': f'session={session_key}'}\n        response = requests.get(url, headers=headers)\n        if response.status_code == 200:",
        "detail": "2023.day21.AOCInputGrabber",
        "documentation": {}
    },
    {
        "label": "Day21",
        "kind": 6,
        "importPath": "2023.day21.Day21",
        "description": "2023.day21.Day21",
        "peekOfCode": "class Day21:\n    def __init__(self):\n        self.input_content = None\n        self.DAY = 21\n        self.YEAR = 2023\n        self.aoc_utils = AOCInputGrabber(self.YEAR, self.DAY)\n    def solve_part1(self):\n        self.loadGrid()\n        start = self.find_start()\n        steps = 6",
        "detail": "2023.day21.Day21",
        "documentation": {}
    },
    {
        "label": "solver",
        "kind": 5,
        "importPath": "2023.day21.Day21",
        "description": "2023.day21.Day21",
        "peekOfCode": "solver = Day21()\nsolver.loadInputFiles()\nstart_time_part1 = time.time()\npart1_result = solver.solve_part1()\nend_time_part1 = time.time()\nprint(\"Solution to Part 1:\", part1_result, \"completed in\", round((end_time_part1 - start_time_part1) * 1000), \"ms\")\nstart_time_part2 = time.time()\npart2_result = solver.solve_part2()\nend_time_part2 = time.time()\nprint(\"Solution to Part 2:\", part2_result, \"completed in\", round((end_time_part2 - start_time_part2) * 1000), \"ms\")",
        "detail": "2023.day21.Day21",
        "documentation": {}
    },
    {
        "label": "start_time_part1",
        "kind": 5,
        "importPath": "2023.day21.Day21",
        "description": "2023.day21.Day21",
        "peekOfCode": "start_time_part1 = time.time()\npart1_result = solver.solve_part1()\nend_time_part1 = time.time()\nprint(\"Solution to Part 1:\", part1_result, \"completed in\", round((end_time_part1 - start_time_part1) * 1000), \"ms\")\nstart_time_part2 = time.time()\npart2_result = solver.solve_part2()\nend_time_part2 = time.time()\nprint(\"Solution to Part 2:\", part2_result, \"completed in\", round((end_time_part2 - start_time_part2) * 1000), \"ms\")",
        "detail": "2023.day21.Day21",
        "documentation": {}
    },
    {
        "label": "part1_result",
        "kind": 5,
        "importPath": "2023.day21.Day21",
        "description": "2023.day21.Day21",
        "peekOfCode": "part1_result = solver.solve_part1()\nend_time_part1 = time.time()\nprint(\"Solution to Part 1:\", part1_result, \"completed in\", round((end_time_part1 - start_time_part1) * 1000), \"ms\")\nstart_time_part2 = time.time()\npart2_result = solver.solve_part2()\nend_time_part2 = time.time()\nprint(\"Solution to Part 2:\", part2_result, \"completed in\", round((end_time_part2 - start_time_part2) * 1000), \"ms\")",
        "detail": "2023.day21.Day21",
        "documentation": {}
    },
    {
        "label": "end_time_part1",
        "kind": 5,
        "importPath": "2023.day21.Day21",
        "description": "2023.day21.Day21",
        "peekOfCode": "end_time_part1 = time.time()\nprint(\"Solution to Part 1:\", part1_result, \"completed in\", round((end_time_part1 - start_time_part1) * 1000), \"ms\")\nstart_time_part2 = time.time()\npart2_result = solver.solve_part2()\nend_time_part2 = time.time()\nprint(\"Solution to Part 2:\", part2_result, \"completed in\", round((end_time_part2 - start_time_part2) * 1000), \"ms\")",
        "detail": "2023.day21.Day21",
        "documentation": {}
    },
    {
        "label": "start_time_part2",
        "kind": 5,
        "importPath": "2023.day21.Day21",
        "description": "2023.day21.Day21",
        "peekOfCode": "start_time_part2 = time.time()\npart2_result = solver.solve_part2()\nend_time_part2 = time.time()\nprint(\"Solution to Part 2:\", part2_result, \"completed in\", round((end_time_part2 - start_time_part2) * 1000), \"ms\")",
        "detail": "2023.day21.Day21",
        "documentation": {}
    },
    {
        "label": "part2_result",
        "kind": 5,
        "importPath": "2023.day21.Day21",
        "description": "2023.day21.Day21",
        "peekOfCode": "part2_result = solver.solve_part2()\nend_time_part2 = time.time()\nprint(\"Solution to Part 2:\", part2_result, \"completed in\", round((end_time_part2 - start_time_part2) * 1000), \"ms\")",
        "detail": "2023.day21.Day21",
        "documentation": {}
    },
    {
        "label": "end_time_part2",
        "kind": 5,
        "importPath": "2023.day21.Day21",
        "description": "2023.day21.Day21",
        "peekOfCode": "end_time_part2 = time.time()\nprint(\"Solution to Part 2:\", part2_result, \"completed in\", round((end_time_part2 - start_time_part2) * 1000), \"ms\")",
        "detail": "2023.day21.Day21",
        "documentation": {}
    },
    {
        "label": "AOCInputGrabber",
        "kind": 6,
        "importPath": "2023.day22.AOCInputGrabber",
        "description": "2023.day22.AOCInputGrabber",
        "peekOfCode": "class AOCInputGrabber:\n    def __init__(self, year, day):\n        self.year = year\n        self.day = day\n    def grab_input(self):\n        session_key = os.environ.get('AOC_SESSION_KEY')\n        url = f'https://adventofcode.com/{self.year}/day/{self.day}/input'\n        headers = {'cookie': f'session={session_key}'}\n        response = requests.get(url, headers=headers)\n        if response.status_code == 200:",
        "detail": "2023.day22.AOCInputGrabber",
        "documentation": {}
    },
    {
        "label": "Day22",
        "kind": 6,
        "importPath": "2023.day22.Day22",
        "description": "2023.day22.Day22",
        "peekOfCode": "class Day22:\n    def __init__(self):\n        self.input_content = None\n        self.DAY = 22\n        self.YEAR = 2023\n        self.aoc_utils = AOCInputGrabber(self.YEAR, self.DAY)\n        self.X_START = 0\n        self.Y_START = 1\n        self.Z_START = 2\n        self.X_END = 3",
        "detail": "2023.day22.Day22",
        "documentation": {}
    },
    {
        "label": "solver",
        "kind": 5,
        "importPath": "2023.day22.Day22",
        "description": "2023.day22.Day22",
        "peekOfCode": "solver = Day22()\nsolver.loadInputFiles()\nstart_time_part1 = time.time()\npart1_result = solver.solve_part1()\nend_time_part1 = time.time()\nprint(\"Solution to Part 1:\", part1_result, \"completed in\", round((end_time_part1 - start_time_part1) * 1000), \"ms\")\nstart_time_part2 = time.time()\npart2_result = solver.solve_part2()\nend_time_part2 = time.time()\nprint(\"Solution to Part 2:\", part2_result, \"completed in\", round((end_time_part2 - start_time_part2) * 1000), \"ms\")",
        "detail": "2023.day22.Day22",
        "documentation": {}
    },
    {
        "label": "start_time_part1",
        "kind": 5,
        "importPath": "2023.day22.Day22",
        "description": "2023.day22.Day22",
        "peekOfCode": "start_time_part1 = time.time()\npart1_result = solver.solve_part1()\nend_time_part1 = time.time()\nprint(\"Solution to Part 1:\", part1_result, \"completed in\", round((end_time_part1 - start_time_part1) * 1000), \"ms\")\nstart_time_part2 = time.time()\npart2_result = solver.solve_part2()\nend_time_part2 = time.time()\nprint(\"Solution to Part 2:\", part2_result, \"completed in\", round((end_time_part2 - start_time_part2) * 1000), \"ms\")",
        "detail": "2023.day22.Day22",
        "documentation": {}
    },
    {
        "label": "part1_result",
        "kind": 5,
        "importPath": "2023.day22.Day22",
        "description": "2023.day22.Day22",
        "peekOfCode": "part1_result = solver.solve_part1()\nend_time_part1 = time.time()\nprint(\"Solution to Part 1:\", part1_result, \"completed in\", round((end_time_part1 - start_time_part1) * 1000), \"ms\")\nstart_time_part2 = time.time()\npart2_result = solver.solve_part2()\nend_time_part2 = time.time()\nprint(\"Solution to Part 2:\", part2_result, \"completed in\", round((end_time_part2 - start_time_part2) * 1000), \"ms\")",
        "detail": "2023.day22.Day22",
        "documentation": {}
    },
    {
        "label": "end_time_part1",
        "kind": 5,
        "importPath": "2023.day22.Day22",
        "description": "2023.day22.Day22",
        "peekOfCode": "end_time_part1 = time.time()\nprint(\"Solution to Part 1:\", part1_result, \"completed in\", round((end_time_part1 - start_time_part1) * 1000), \"ms\")\nstart_time_part2 = time.time()\npart2_result = solver.solve_part2()\nend_time_part2 = time.time()\nprint(\"Solution to Part 2:\", part2_result, \"completed in\", round((end_time_part2 - start_time_part2) * 1000), \"ms\")",
        "detail": "2023.day22.Day22",
        "documentation": {}
    },
    {
        "label": "start_time_part2",
        "kind": 5,
        "importPath": "2023.day22.Day22",
        "description": "2023.day22.Day22",
        "peekOfCode": "start_time_part2 = time.time()\npart2_result = solver.solve_part2()\nend_time_part2 = time.time()\nprint(\"Solution to Part 2:\", part2_result, \"completed in\", round((end_time_part2 - start_time_part2) * 1000), \"ms\")",
        "detail": "2023.day22.Day22",
        "documentation": {}
    },
    {
        "label": "part2_result",
        "kind": 5,
        "importPath": "2023.day22.Day22",
        "description": "2023.day22.Day22",
        "peekOfCode": "part2_result = solver.solve_part2()\nend_time_part2 = time.time()\nprint(\"Solution to Part 2:\", part2_result, \"completed in\", round((end_time_part2 - start_time_part2) * 1000), \"ms\")",
        "detail": "2023.day22.Day22",
        "documentation": {}
    },
    {
        "label": "end_time_part2",
        "kind": 5,
        "importPath": "2023.day22.Day22",
        "description": "2023.day22.Day22",
        "peekOfCode": "end_time_part2 = time.time()\nprint(\"Solution to Part 2:\", part2_result, \"completed in\", round((end_time_part2 - start_time_part2) * 1000), \"ms\")",
        "detail": "2023.day22.Day22",
        "documentation": {}
    },
    {
        "label": "AOCInputGrabber",
        "kind": 6,
        "importPath": "2023.day23.AOCInputGrabber",
        "description": "2023.day23.AOCInputGrabber",
        "peekOfCode": "class AOCInputGrabber:\n    def __init__(self, year, day):\n        self.year = year\n        self.day = day\n    def grab_input(self):\n        session_key = os.environ.get('AOC_SESSION_KEY')\n        url = f'https://adventofcode.com/{self.year}/day/{self.day}/input'\n        headers = {'cookie': f'session={session_key}'}\n        response = requests.get(url, headers=headers)\n        if response.status_code == 200:",
        "detail": "2023.day23.AOCInputGrabber",
        "documentation": {}
    },
    {
        "label": "Day23",
        "kind": 6,
        "importPath": "2023.day23.Day23",
        "description": "2023.day23.Day23",
        "peekOfCode": "class Day23:\n    def __init__(self):\n        self.input_content = None\n        self.DAY = 23\n        self.YEAR = 2023\n        self.aoc_utils = AOCInputGrabber(self.YEAR, self.DAY)\n    def solve(self, part1):\n        graph = self.simplifyEdges(part1)\n        visited = set()\n        return self.bruteForceSearch(self.start, graph, visited)",
        "detail": "2023.day23.Day23",
        "documentation": {}
    },
    {
        "label": "solver",
        "kind": 5,
        "importPath": "2023.day23.Day23",
        "description": "2023.day23.Day23",
        "peekOfCode": "solver = Day23()\nsolver.loadInputFiles()\nstart_time_part1 = time.time()\npart1_result = solver.solve(True)\nend_time_part1 = time.time()\nprint(\"Solution to Part 1:\", part1_result, \"completed in\", round((end_time_part1 - start_time_part1) * 1000), \"ms\")\nstart_time_part2 = time.time()\npart2_result = solver.solve(False)\nend_time_part2 = time.time()\nprint(\"Solution to Part 2:\", part2_result, \"completed in\", round((end_time_part2 - start_time_part2) * 1000), \"ms\")",
        "detail": "2023.day23.Day23",
        "documentation": {}
    },
    {
        "label": "start_time_part1",
        "kind": 5,
        "importPath": "2023.day23.Day23",
        "description": "2023.day23.Day23",
        "peekOfCode": "start_time_part1 = time.time()\npart1_result = solver.solve(True)\nend_time_part1 = time.time()\nprint(\"Solution to Part 1:\", part1_result, \"completed in\", round((end_time_part1 - start_time_part1) * 1000), \"ms\")\nstart_time_part2 = time.time()\npart2_result = solver.solve(False)\nend_time_part2 = time.time()\nprint(\"Solution to Part 2:\", part2_result, \"completed in\", round((end_time_part2 - start_time_part2) * 1000), \"ms\")",
        "detail": "2023.day23.Day23",
        "documentation": {}
    },
    {
        "label": "part1_result",
        "kind": 5,
        "importPath": "2023.day23.Day23",
        "description": "2023.day23.Day23",
        "peekOfCode": "part1_result = solver.solve(True)\nend_time_part1 = time.time()\nprint(\"Solution to Part 1:\", part1_result, \"completed in\", round((end_time_part1 - start_time_part1) * 1000), \"ms\")\nstart_time_part2 = time.time()\npart2_result = solver.solve(False)\nend_time_part2 = time.time()\nprint(\"Solution to Part 2:\", part2_result, \"completed in\", round((end_time_part2 - start_time_part2) * 1000), \"ms\")",
        "detail": "2023.day23.Day23",
        "documentation": {}
    },
    {
        "label": "end_time_part1",
        "kind": 5,
        "importPath": "2023.day23.Day23",
        "description": "2023.day23.Day23",
        "peekOfCode": "end_time_part1 = time.time()\nprint(\"Solution to Part 1:\", part1_result, \"completed in\", round((end_time_part1 - start_time_part1) * 1000), \"ms\")\nstart_time_part2 = time.time()\npart2_result = solver.solve(False)\nend_time_part2 = time.time()\nprint(\"Solution to Part 2:\", part2_result, \"completed in\", round((end_time_part2 - start_time_part2) * 1000), \"ms\")",
        "detail": "2023.day23.Day23",
        "documentation": {}
    },
    {
        "label": "start_time_part2",
        "kind": 5,
        "importPath": "2023.day23.Day23",
        "description": "2023.day23.Day23",
        "peekOfCode": "start_time_part2 = time.time()\npart2_result = solver.solve(False)\nend_time_part2 = time.time()\nprint(\"Solution to Part 2:\", part2_result, \"completed in\", round((end_time_part2 - start_time_part2) * 1000), \"ms\")",
        "detail": "2023.day23.Day23",
        "documentation": {}
    },
    {
        "label": "part2_result",
        "kind": 5,
        "importPath": "2023.day23.Day23",
        "description": "2023.day23.Day23",
        "peekOfCode": "part2_result = solver.solve(False)\nend_time_part2 = time.time()\nprint(\"Solution to Part 2:\", part2_result, \"completed in\", round((end_time_part2 - start_time_part2) * 1000), \"ms\")",
        "detail": "2023.day23.Day23",
        "documentation": {}
    },
    {
        "label": "end_time_part2",
        "kind": 5,
        "importPath": "2023.day23.Day23",
        "description": "2023.day23.Day23",
        "peekOfCode": "end_time_part2 = time.time()\nprint(\"Solution to Part 2:\", part2_result, \"completed in\", round((end_time_part2 - start_time_part2) * 1000), \"ms\")",
        "detail": "2023.day23.Day23",
        "documentation": {}
    },
    {
        "label": "timeCalc",
        "kind": 2,
        "importPath": "2023.helper.timeCalc",
        "description": "2023.helper.timeCalc",
        "peekOfCode": "def timeCalc(t1, t2):\n    t1 = t1.split(':')\n    t2 = t2.split(':')\n    t1 = [int(i) for i in t1]\n    t2 = [int(i) for i in t2]\n    t1 = t1[0]*3600 + t1[1]*60 + t1[2]\n    t2 = t2[0]*3600 + t2[1]*60 + t2[2]\n    t3 = t2 - t1\n    t3 = str(t3//3600) + ':' + str(t3%3600//60) + ':' + str(t3%60)\n    return t3",
        "detail": "2023.helper.timeCalc",
        "documentation": {}
    },
    {
        "label": "t1",
        "kind": 5,
        "importPath": "2023.helper.timeCalc",
        "description": "2023.helper.timeCalc",
        "peekOfCode": "t1 = '01:05:16'\nt2 = '03:15:15'\ndef timeCalc(t1, t2):\n    t1 = t1.split(':')\n    t2 = t2.split(':')\n    t1 = [int(i) for i in t1]\n    t2 = [int(i) for i in t2]\n    t1 = t1[0]*3600 + t1[1]*60 + t1[2]\n    t2 = t2[0]*3600 + t2[1]*60 + t2[2]\n    t3 = t2 - t1",
        "detail": "2023.helper.timeCalc",
        "documentation": {}
    },
    {
        "label": "t2",
        "kind": 5,
        "importPath": "2023.helper.timeCalc",
        "description": "2023.helper.timeCalc",
        "peekOfCode": "t2 = '03:15:15'\ndef timeCalc(t1, t2):\n    t1 = t1.split(':')\n    t2 = t2.split(':')\n    t1 = [int(i) for i in t1]\n    t2 = [int(i) for i in t2]\n    t1 = t1[0]*3600 + t1[1]*60 + t1[2]\n    t2 = t2[0]*3600 + t2[1]*60 + t2[2]\n    t3 = t2 - t1\n    t3 = str(t3//3600) + ':' + str(t3%3600//60) + ':' + str(t3%60)",
        "detail": "2023.helper.timeCalc",
        "documentation": {}
    }
]